Reactive streams

quarkus ext add io.quarkus:quarkus-mutiny-reactive-streams-operators

@GET
@Path("/rs1")
public void rs1() {
    CompletionStage<List<String>> cs = ReactiveStreams.of("Luke", "Leia", "Han")
        .map(String::toUpperCase)
        .filter(s -> s.startsWith("L"))
        .toList()
        .run();

    cs.thenAccept(System.out::println);
}

--------------------------------------------------------------------

    @GET
    @Path("/rs1")
    @Produces(MediaType.APPLICATION_JSON)
    public Multi<String> rs1() {
        return Multi.createFrom().items("Luke", "Leia", "Han")
            .map(String::toUpperCase)
            .filter(s -> s.startsWith("L"))
            .onItem()
            .invoke(s -> Log.infof("Processing %s", s));
    }

    @GET
    @Path("/rs2")
    @Produces(MediaType.SERVER_SENT_EVENTS)
    public Multi<String> rs2() {
        return Multi.createFrom().ticks()
            .every(Duration.ofSeconds(1))
            .map(aLong -> "Tick #" + aLong);
    }

  
@GET
    @Path("/rs3")
    public void rs3() {
        Multi.createFrom().publisher(publisher())
            .map(processor())
            .subscribe().withSubscriber(subscriber());
    }

    private Function<Long, String> processor() {
        return aLong -> "Tick #" + aLong;
    }

    private Flow.Subscriber<String> subscriber() {
        return new Flow.Subscriber() {
            private Flow.Subscription subscription;

            @Override
            public void onSubscribe(Flow.Subscription subscription) {
                System.out.println("GreetingResource.onSubscribe " + subscription);
                this.subscription = subscription;
                subscription.request(1);
            }

            @Override
            public void onNext(Object item) {
                System.out.println("GreetingResource.onNext " + item);
                subscription.request(1);
            }

            @Override
            public void onError(Throwable throwable) {
                System.out.println("GreetingResource.onError " + throwable);
            }

            @Override
            public void onComplete() {
                System.out.println("GreetingResource.onComplete");
            }
        };
    }

    private Flow.Publisher<Long> publisher() {
        return Multi.createFrom().ticks()
            .every(Duration.of(500, ChronoUnit.MILLIS))
            .select()
            .first(10);
    }


=================================================================================

qa smallrye-reactive-messaging-kafka


-------------------------------------------------------------------------
BaristaResource

  @Incoming("orders")
    @Outgoing("queue")
    @Blocking
    public Beverage process(Order order) {
        return prepare(order);
    }


----------------------

## Orders topic
mp.messaging.incoming.orders.auto.offset.reset=earliest


----------------------------------------------------------------------
----------------------------------------------------------------------
CoffeeShopResource


    // Orders emitter (orders)
    @Channel("orders") Emitter<Order> orders;
    // Queue emitter (beverages)
    @Channel("queue") Emitter<Beverage> queue;

    @POST
    @Path("/messaging")
    public Order messaging(Order order) {
        logger.infof("Received order %s on /messaging", order);
        order = order.withOrderId(getId());
        orders.send(order);
        queue.send(Beverage.queued(order));
        return order;
    }

    private String getId() {
        return UUID.randomUUID().toString();
    }

-------------------------------------------------
NO, just mention

## Beverage channel -> queue topic
mp.messaging.incoming.beverages.topic=queue

## Configure the dev service to create a topic 'orders' with 4 partitions
quarkus.kafka.devservices.topic-partitions.orders=4

